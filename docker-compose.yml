version: '2'
services:
  mongo:
    image: mongo
    container_name: mongodb
    hostname: mongodb
    volumes:
      - ./mongodb:/data/db
    restart: always
    networks:
      - elk
    expose:
      - 6016
    ports:
      - "27017:27017"

  adminmongo:
    image: mrvautin/adminmongo
    container_name: adminmongo
    hostname: adminmongo
    networks:
      - elk
    ports:
      - "1234:1234"
    environment:
      - HOST=0.0.0.0

  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    hostname: zookeeper
    networks:
      - elk
    ports:
      - "2181:2181"

  kafka:
    image: wurstmeister/kafka:2.11-0.11.0.3
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
    networks:
      - elk
    depends_on:
      - zookeeper
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_HOST_NAME: 192.168.99.100
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://:9092
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./kafka:/kafka

  restproxy:
    image: confluentinc/cp-kafka-rest:5.2.1
    restart: always
    container_name: restproxy
    hostname: restproxy
    depends_on:
      - kafka
    networks:
      - elk
    environment:
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082
      KAFKA_REST_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      KAFKA_REST_HOST_NAME: restproxy
      KAFKA_REST_DEBUG: "true"
    ports:
      - 8082:8082

  jupyter:
    build:
      context: ./dockerfile
      dockerfile: dockerfile-jupyter
    container_name: jupyter
    hostname: jupyter
    networks:
      - elk
    ports:
      - "8889:8888"
    command: start-notebook.sh --NotebookApp.token=''
    volumes:
      - ./jupyter:/home/jovyan/work

  pyspark:
    image: orozcohsu/pyspark_mongo_ltu:v3  
    container_name: pyspark
    hostname: pyspark
    networks:
      - elk
    ports:
      - "8890:8888"
      - "4040:4040"
      - "4041:4041"
    command: start-notebook.sh --NotebookApp.token=''
    volumes:
      - ./pyspark:/pyspark

  mysql:
    image: mysql:8.0
    container_name: mysql
    hostname: mysql
    ports:
      - "3307:3306"
    networks:
      - elk
    environment:
      - MYSQL_ROOT_PASSWORD=iii
    volumes:
      - ./mysql_db/mysql_data:/var/lib/mysql
      - ./mysql_db/mysql_init:/docker-entrypoint-initdb.d/

  ksql-server:
    image: confluentinc/cp-ksql-server:5.2.1
    container_name: ksql-server
    depends_on:
      - kafka
    ports:
      - "8088:8088"
    networks:
      - elk
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      KSQL_BOOTSTRAP_SERVERS: kafka:9092
      KSQL_LISTENERS: "http://0.0.0.0:8088"
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"

  ksql-cli:
    image: confluentinc/cp-ksql-cli:5.2.1
    container_name: ksql-cli
    depends_on:
      - kafka
      - ksql-server
    networks:
      - elk
    entrypoint: /bin/sh
    tty: true

  schema-registry:
    image: confluentinc/cp-schema-registry:5.2.1
    container_name: schema-registry
    depends_on:
      - zookeeper
      - kafka
    ports:
      - "8081:8081"
    networks:
      - elk
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'
  
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4
    hostname: elasticsearch
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - ./elasticsearch/data:/usr/share/elasticsearch/data
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml
    environment:
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"
    networks:
      - elk

  logstash:
    image: docker.elastic.co/logstash/logstash:6.2.4
    hostname: logstash
    container_name: logstash
    ports:
      - "5000:5000"
    networks:
      - elk
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:6.2.4
    hostname: kibana
    container_name: kibana
    ports:
      - "5601:5601"
    networks:  
      - elk
    depends_on:
      - elasticsearch

networks:
  elk:
    driver: bridge
